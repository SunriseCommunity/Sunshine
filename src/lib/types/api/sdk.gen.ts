// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { PostAuthTokenData, PostAuthTokenResponses, PostAuthTokenErrors, PostAuthRefreshData, PostAuthRefreshResponses, PostAuthRefreshErrors, PostAuthRegisterData, PostAuthRegisterResponses, PostAuthRegisterErrors, GetPingData, GetPingResponses, GetPingErrors, GetLimitsData, GetLimitsResponses, GetLimitsErrors, GetStatusData, GetStatusResponses, GetStatusErrors, GetBeatmapByIdData, GetBeatmapByIdResponses, GetBeatmapByIdErrors, GetBeatmapsetByBeatmapSetByIdData, GetBeatmapsetByBeatmapSetByIdResponses, GetBeatmapsetByBeatmapSetByIdErrors, GetBeatmapByIdPpData, GetBeatmapByIdPpResponses, GetBeatmapByIdPpErrors, GetBeatmapsetByBeatmapSetByIdPpData, GetBeatmapsetByBeatmapSetByIdPpResponses, GetBeatmapsetByBeatmapSetByIdPpErrors, GetBeatmapByIdLeaderboardData, GetBeatmapByIdLeaderboardResponses, GetBeatmapByIdLeaderboardErrors, GetBeatmapsetByBeatmapSetByIdLeaderboardData, GetBeatmapsetByBeatmapSetByIdLeaderboardResponses, GetBeatmapsetByBeatmapSetByIdLeaderboardErrors, GetBeatmapsetByIdData, GetBeatmapsetByIdResponses, GetBeatmapsetByIdErrors, GetBeatmapsetByIdHypeData, GetBeatmapsetByIdHypeResponses, GetBeatmapsetByIdHypeErrors, PostBeatmapsetByIdHypeData, PostBeatmapsetByIdHypeResponses, PostBeatmapsetByIdHypeErrors, GetBeatmapsetGetHypedSetsData, GetBeatmapsetGetHypedSetsResponses, GetBeatmapsetGetHypedSetsErrors, GetBeatmapsetByIdEventsData, GetBeatmapsetByIdEventsResponses, GetBeatmapsetByIdEventsErrors, GetBeatmapsetEventsData, GetBeatmapsetEventsResponses, GetBeatmapsetEventsErrors, GetBeatmapsetByIdFavouritedData, GetBeatmapsetByIdFavouritedResponses, GetBeatmapsetByIdFavouritedErrors, PostBeatmapsetByIdFavouritedData, PostBeatmapsetByIdFavouritedResponses, PostBeatmapsetByIdFavouritedErrors, PostBeatmapUpdateCustomStatusData, PostBeatmapUpdateCustomStatusResponses, PostBeatmapUpdateCustomStatusErrors, GetBeatmapsetSearchData, GetBeatmapsetSearchResponses, GetBeatmapsetSearchErrors, GetScoreByIdData, GetScoreByIdResponses, GetScoreByIdErrors, GetScoreByIdReplayData, GetScoreByIdReplayResponses, GetScoreByIdReplayErrors, GetScoreTopData, GetScoreTopResponses, GetScoreTopErrors, GetUserByIdData, GetUserByIdResponses, GetUserByIdErrors, GetUserByIdByModeData, GetUserByIdByModeResponses, GetUserByIdByModeErrors, GetUserSelfData, GetUserSelfResponses, GetUserSelfErrors, GetUserSelfByModeData, GetUserSelfByModeResponses, GetUserSelfByModeErrors, PostUserEditDescriptionData, PostUserEditDescriptionResponses, PostUserEditDescriptionErrors, PostUserEditDefaultGamemodeData, PostUserEditDefaultGamemodeResponses, PostUserEditDefaultGamemodeErrors, GetUserByUserIdGraphData, GetUserByUserIdGraphResponses, GetUserByUserIdGraphErrors, GetUserByIdScoresData, GetUserByIdScoresResponses, GetUserByIdScoresErrors, GetUserByIdMostplayedData, GetUserByIdMostplayedResponses, GetUserByIdMostplayedErrors, GetUserByIdFavouritesData, GetUserByIdFavouritesResponses, GetUserByIdFavouritesErrors, GetUserLeaderboardData, GetUserLeaderboardResponses, GetUserLeaderboardErrors, GetUserSearchData, GetUserSearchResponses, GetUserSearchErrors, GetUserFriendsData, GetUserFriendsResponses, GetUserFriendsErrors, GetUserFollowersData, GetUserFollowersResponses, GetUserFollowersErrors, GetUserByIdFriendStatusData, GetUserByIdFriendStatusResponses, GetUserByIdFriendStatusErrors, PostUserByIdFriendStatusData, PostUserByIdFriendStatusResponses, PostUserByIdFriendStatusErrors, GetUserInventoryItemData, GetUserInventoryItemResponses, GetUserInventoryItemErrors, GetUserByIdFriendsCountData, GetUserByIdFriendsCountResponses, GetUserByIdFriendsCountErrors, GetUserByIdMedalsData, GetUserByIdMedalsResponses, GetUserByIdMedalsErrors, GetUserByIdGradesData, GetUserByIdGradesResponses, GetUserByIdGradesErrors, GetUserByIdMetadataData, GetUserByIdMetadataResponses, GetUserByIdMetadataErrors, PostUserEditMetadataData, PostUserEditMetadataResponses, PostUserEditMetadataErrors, PostUserUploadAvatarData, PostUserUploadAvatarResponses, PostUserUploadAvatarErrors, PostUserUploadBannerData, PostUserUploadBannerResponses, PostUserUploadBannerErrors, PostUserPasswordChangeData, PostUserPasswordChangeResponses, PostUserPasswordChangeErrors, PostUserUsernameChangeData, PostUserUsernameChangeResponses, PostUserUsernameChangeErrors, GetWsData, GetWsResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Generate user auth tokens
 */
export const postAuthToken = <ThrowOnError extends boolean = false>(options?: Options<PostAuthTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostAuthTokenResponses, PostAuthTokenErrors, ThrowOnError>({
        url: '/auth/token',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Refresh user auth token
 */
export const postAuthRefresh = <ThrowOnError extends boolean = false>(options?: Options<PostAuthRefreshData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostAuthRefreshResponses, PostAuthRefreshErrors, ThrowOnError>({
        url: '/auth/refresh',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Register new user
 */
export const postAuthRegister = <ThrowOnError extends boolean = false>(options?: Options<PostAuthRegisterData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostAuthRegisterResponses, PostAuthRegisterErrors, ThrowOnError>({
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Basic ping endpoint
 */
export const getPing = <ThrowOnError extends boolean = false>(options?: Options<GetPingData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPingResponses, GetPingErrors, ThrowOnError>({
        url: '/ping',
        ...options
    });
};

/**
 * Check current API limits
 */
export const getLimits = <ThrowOnError extends boolean = false>(options?: Options<GetLimitsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLimitsResponses, GetLimitsErrors, ThrowOnError>({
        url: '/limits',
        ...options
    });
};

/**
 * Check server status
 */
export const getStatus = <ThrowOnError extends boolean = false>(options?: Options<GetStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetStatusResponses, GetStatusErrors, ThrowOnError>({
        url: '/status',
        ...options
    });
};

/**
 * Get beatmap
 */
export const getBeatmapById = <ThrowOnError extends boolean = false>(options: Options<GetBeatmapByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBeatmapByIdResponses, GetBeatmapByIdErrors, ThrowOnError>({
        url: '/beatmap/{id}',
        ...options
    });
};

/**
 * Get beatmap
 */
export const getBeatmapsetByBeatmapSetById = <ThrowOnError extends boolean = false>(options: Options<GetBeatmapsetByBeatmapSetByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBeatmapsetByBeatmapSetByIdResponses, GetBeatmapsetByBeatmapSetByIdErrors, ThrowOnError>({
        url: '/beatmapset/{beatmapSet}/{id}',
        ...options
    });
};

/**
 * Get beatmap performance
 */
export const getBeatmapByIdPp = <ThrowOnError extends boolean = false>(options: Options<GetBeatmapByIdPpData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBeatmapByIdPpResponses, GetBeatmapByIdPpErrors, ThrowOnError>({
        url: '/beatmap/{id}/pp',
        ...options
    });
};

/**
 * Get beatmap performance
 */
export const getBeatmapsetByBeatmapSetByIdPp = <ThrowOnError extends boolean = false>(options: Options<GetBeatmapsetByBeatmapSetByIdPpData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBeatmapsetByBeatmapSetByIdPpResponses, GetBeatmapsetByBeatmapSetByIdPpErrors, ThrowOnError>({
        url: '/beatmapset/{beatmapSet}/{id}/pp',
        ...options
    });
};

/**
 * Get beatmap leaderboard
 */
export const getBeatmapByIdLeaderboard = <ThrowOnError extends boolean = false>(options: Options<GetBeatmapByIdLeaderboardData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBeatmapByIdLeaderboardResponses, GetBeatmapByIdLeaderboardErrors, ThrowOnError>({
        url: '/beatmap/{id}/leaderboard',
        ...options
    });
};

/**
 * Get beatmap leaderboard
 */
export const getBeatmapsetByBeatmapSetByIdLeaderboard = <ThrowOnError extends boolean = false>(options: Options<GetBeatmapsetByBeatmapSetByIdLeaderboardData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBeatmapsetByBeatmapSetByIdLeaderboardResponses, GetBeatmapsetByBeatmapSetByIdLeaderboardErrors, ThrowOnError>({
        url: '/beatmapset/{beatmapSet}/{id}/leaderboard',
        ...options
    });
};

/**
 * Get beatmapset
 */
export const getBeatmapsetById = <ThrowOnError extends boolean = false>(options: Options<GetBeatmapsetByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBeatmapsetByIdResponses, GetBeatmapsetByIdErrors, ThrowOnError>({
        url: '/beatmapset/{id}',
        ...options
    });
};

/**
 * Get beatmapset hype count
 */
export const getBeatmapsetByIdHype = <ThrowOnError extends boolean = false>(options: Options<GetBeatmapsetByIdHypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBeatmapsetByIdHypeResponses, GetBeatmapsetByIdHypeErrors, ThrowOnError>({
        url: '/beatmapset/{id}/hype',
        ...options
    });
};

/**
 * Hype beatmapset
 */
export const postBeatmapsetByIdHype = <ThrowOnError extends boolean = false>(options: Options<PostBeatmapsetByIdHypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostBeatmapsetByIdHypeResponses, PostBeatmapsetByIdHypeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/beatmapset/{id}/hype',
        ...options
    });
};

/**
 * Returns beatmapsets with active hype train
 */
export const getBeatmapsetGetHypedSets = <ThrowOnError extends boolean = false>(options?: Options<GetBeatmapsetGetHypedSetsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetBeatmapsetGetHypedSetsResponses, GetBeatmapsetGetHypedSetsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/beatmapset/get-hyped-sets',
        ...options
    });
};

/**
 * Get beatmapset related events
 */
export const getBeatmapsetByIdEvents = <ThrowOnError extends boolean = false>(options: Options<GetBeatmapsetByIdEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBeatmapsetByIdEventsResponses, GetBeatmapsetByIdEventsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/beatmapset/{id}/events',
        ...options
    });
};

/**
 * Get beatmapsets related events
 */
export const getBeatmapsetEvents = <ThrowOnError extends boolean = false>(options?: Options<GetBeatmapsetEventsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetBeatmapsetEventsResponses, GetBeatmapsetEventsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/beatmapset/events',
        ...options
    });
};

/**
 * Check if beatmapset is favourited by current user
 */
export const getBeatmapsetByIdFavourited = <ThrowOnError extends boolean = false>(options: Options<GetBeatmapsetByIdFavouritedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBeatmapsetByIdFavouritedResponses, GetBeatmapsetByIdFavouritedErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/beatmapset/{id}/favourited',
        ...options
    });
};

/**
 * Add/remove beatmapset from users favourites
 */
export const postBeatmapsetByIdFavourited = <ThrowOnError extends boolean = false>(options: Options<PostBeatmapsetByIdFavouritedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostBeatmapsetByIdFavouritedResponses, PostBeatmapsetByIdFavouritedErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/beatmapset/{id}/favourited',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Updates beatmap custom status. Use 'Unknown' to reset beatmap custom status
 */
export const postBeatmapUpdateCustomStatus = <ThrowOnError extends boolean = false>(options?: Options<PostBeatmapUpdateCustomStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostBeatmapUpdateCustomStatusResponses, PostBeatmapUpdateCustomStatusErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/beatmap/update-custom-status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Search beatmapsets
 */
export const getBeatmapsetSearch = <ThrowOnError extends boolean = false>(options?: Options<GetBeatmapsetSearchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetBeatmapsetSearchResponses, GetBeatmapsetSearchErrors, ThrowOnError>({
        url: '/beatmapset/search',
        ...options
    });
};

/**
 * Get score
 */
export const getScoreById = <ThrowOnError extends boolean = false>(options: Options<GetScoreByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetScoreByIdResponses, GetScoreByIdErrors, ThrowOnError>({
        url: '/score/{id}',
        ...options
    });
};

/**
 * Get score replay file
 */
export const getScoreByIdReplay = <ThrowOnError extends boolean = false>(options: Options<GetScoreByIdReplayData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetScoreByIdReplayResponses, GetScoreByIdReplayErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/score/{id}/replay',
        ...options
    });
};

/**
 * Get best scores on the server
 */
export const getScoreTop = <ThrowOnError extends boolean = false>(options?: Options<GetScoreTopData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetScoreTopResponses, GetScoreTopErrors, ThrowOnError>({
        url: '/score/top',
        ...options
    });
};

/**
 * Get user profile
 */
export const getUserById = <ThrowOnError extends boolean = false>(options: Options<GetUserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByIdResponses, GetUserByIdErrors, ThrowOnError>({
        url: '/user/{id}',
        ...options
    });
};

/**
 * Get user profile with user stats
 */
export const getUserByIdByMode = <ThrowOnError extends boolean = false>(options: Options<GetUserByIdByModeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByIdByModeResponses, GetUserByIdByModeErrors, ThrowOnError>({
        url: '/user/{id}/{mode}',
        ...options
    });
};

/**
 * Same as /user/{id}, but automatically gets id of current user from token
 */
export const getUserSelf = <ThrowOnError extends boolean = false>(options?: Options<GetUserSelfData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserSelfResponses, GetUserSelfErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user/self',
        ...options
    });
};

/**
 * Same as /user/{id}/{mode}, but automatically gets id of current user
 */
export const getUserSelfByMode = <ThrowOnError extends boolean = false>(options: Options<GetUserSelfByModeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserSelfByModeResponses, GetUserSelfByModeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user/self/{mode}',
        ...options
    });
};

/**
 * Update current users description
 */
export const postUserEditDescription = <ThrowOnError extends boolean = false>(options?: Options<PostUserEditDescriptionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUserEditDescriptionResponses, PostUserEditDescriptionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user/edit/description',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update current users default gamemode
 */
export const postUserEditDefaultGamemode = <ThrowOnError extends boolean = false>(options?: Options<PostUserEditDefaultGamemodeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUserEditDefaultGamemodeResponses, PostUserEditDefaultGamemodeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user/edit/default-gamemode',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get user stats graph data
 */
export const getUserByUserIdGraph = <ThrowOnError extends boolean = false>(options: Options<GetUserByUserIdGraphData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByUserIdGraphResponses, GetUserByUserIdGraphErrors, ThrowOnError>({
        url: '/user/{userId}/graph',
        ...options
    });
};

/**
 * Get user scores
 */
export const getUserByIdScores = <ThrowOnError extends boolean = false>(options: Options<GetUserByIdScoresData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByIdScoresResponses, GetUserByIdScoresErrors, ThrowOnError>({
        url: '/user/{id}/scores',
        ...options
    });
};

/**
 * Get user most played beatmaps
 */
export const getUserByIdMostplayed = <ThrowOnError extends boolean = false>(options: Options<GetUserByIdMostplayedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByIdMostplayedResponses, GetUserByIdMostplayedErrors, ThrowOnError>({
        url: '/user/{id}/mostplayed',
        ...options
    });
};

/**
 * Get user favourited beatmapsets
 */
export const getUserByIdFavourites = <ThrowOnError extends boolean = false>(options: Options<GetUserByIdFavouritesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByIdFavouritesResponses, GetUserByIdFavouritesErrors, ThrowOnError>({
        url: '/user/{id}/favourites',
        ...options
    });
};

/**
 * Get servers leaderboard
 */
export const getUserLeaderboard = <ThrowOnError extends boolean = false>(options?: Options<GetUserLeaderboardData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserLeaderboardResponses, GetUserLeaderboardErrors, ThrowOnError>({
        url: '/user/leaderboard',
        ...options
    });
};

/**
 * Search user by query
 */
export const getUserSearch = <ThrowOnError extends boolean = false>(options?: Options<GetUserSearchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserSearchResponses, GetUserSearchErrors, ThrowOnError>({
        url: '/user/search',
        ...options
    });
};

/**
 * Get authenticated users friends
 */
export const getUserFriends = <ThrowOnError extends boolean = false>(options?: Options<GetUserFriendsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserFriendsResponses, GetUserFriendsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user/friends',
        ...options
    });
};

/**
 * Get authenticated users followers
 */
export const getUserFollowers = <ThrowOnError extends boolean = false>(options?: Options<GetUserFollowersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserFollowersResponses, GetUserFollowersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user/followers',
        ...options
    });
};

/**
 * Get user friendship status
 */
export const getUserByIdFriendStatus = <ThrowOnError extends boolean = false>(options: Options<GetUserByIdFriendStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByIdFriendStatusResponses, GetUserByIdFriendStatusErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user/{id}/friend/status',
        ...options
    });
};

/**
 * Change friendship status with user
 */
export const postUserByIdFriendStatus = <ThrowOnError extends boolean = false>(options: Options<PostUserByIdFriendStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUserByIdFriendStatusResponses, PostUserByIdFriendStatusErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user/{id}/friend/status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get count of the item in your inventory
 */
export const getUserInventoryItem = <ThrowOnError extends boolean = false>(options?: Options<GetUserInventoryItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserInventoryItemResponses, GetUserInventoryItemErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user/inventory/item',
        ...options
    });
};

/**
 * Get user friends counters
 */
export const getUserByIdFriendsCount = <ThrowOnError extends boolean = false>(options: Options<GetUserByIdFriendsCountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByIdFriendsCountResponses, GetUserByIdFriendsCountErrors, ThrowOnError>({
        url: '/user/{id}/friends/count',
        ...options
    });
};

/**
 * Get user medals
 */
export const getUserByIdMedals = <ThrowOnError extends boolean = false>(options: Options<GetUserByIdMedalsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByIdMedalsResponses, GetUserByIdMedalsErrors, ThrowOnError>({
        url: '/user/{id}/medals',
        ...options
    });
};

/**
 * Get user grades
 */
export const getUserByIdGrades = <ThrowOnError extends boolean = false>(options: Options<GetUserByIdGradesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByIdGradesResponses, GetUserByIdGradesErrors, ThrowOnError>({
        url: '/user/{id}/grades',
        ...options
    });
};

/**
 * Get user metadata
 */
export const getUserByIdMetadata = <ThrowOnError extends boolean = false>(options: Options<GetUserByIdMetadataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByIdMetadataResponses, GetUserByIdMetadataErrors, ThrowOnError>({
        url: '/user/{id}/metadata',
        ...options
    });
};

/**
 * Update self metadata
 */
export const postUserEditMetadata = <ThrowOnError extends boolean = false>(options?: Options<PostUserEditMetadataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUserEditMetadataResponses, PostUserEditMetadataErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user/edit/metadata',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Upload new avatar
 */
export const postUserUploadAvatar = <ThrowOnError extends boolean = false>(options?: Options<PostUserUploadAvatarData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUserUploadAvatarResponses, PostUserUploadAvatarErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user/upload/avatar',
        ...options
    });
};

/**
 * Upload new banner
 */
export const postUserUploadBanner = <ThrowOnError extends boolean = false>(options?: Options<PostUserUploadBannerData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUserUploadBannerResponses, PostUserUploadBannerErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user/upload/banner',
        ...options
    });
};

/**
 * Change current password
 */
export const postUserPasswordChange = <ThrowOnError extends boolean = false>(options?: Options<PostUserPasswordChangeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUserPasswordChangeResponses, PostUserPasswordChangeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user/password/change',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Change current username
 */
export const postUserUsernameChange = <ThrowOnError extends boolean = false>(options?: Options<PostUserUsernameChangeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUserUsernameChangeResponses, PostUserUsernameChangeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user/username/change',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * WebSocket route. Sends server events as stringified JSON on connection.
 */
export const getWs = <ThrowOnError extends boolean = false>(options?: Options<GetWsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWsResponses, unknown, ThrowOnError>({
        url: '/ws',
        ...options
    });
};